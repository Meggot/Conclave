/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package conclaveclient;

import conclaveinterfaces.IAdminInterface;
import conclaveinterfaces.IUserInterface;
import model.Message;
import java.rmi.RemoteException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author BradleyW
 */
public class AdminPanel extends javax.swing.JPanel {

    boolean adminController;
    IAdminInterface controller;

    /**
     * Creates new form AdminPanel
     */
    public AdminPanel(IUserInterface ui) {
        initComponents();
        adminController = true;
        controller = (IAdminInterface) ui;
        initilizeAdminContents();
        Thread adminUpdater = new Thread(new Runnable() {
            @Override
            public void run() {
                while (adminController) {
                    if (!AdminPanel.isShowing()) //Prevents contents being updated as used.
                    {
                        initilizeAdminContents();
                    }
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }
        });
        adminUpdater.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AdminPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        roomSelection = new javax.swing.JComboBox<>();
        roomOpenButton = new javax.swing.JButton();
        roomCloseButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        roomName = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        roomTypeDropdown = new javax.swing.JComboBox<>();
        privateCheckbox = new javax.swing.JCheckBox();
        roomPassword = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        playerSelection = new javax.swing.JComboBox<>();
        banCheckbox = new javax.swing.JCheckBox();
        banKickButton = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        oneWayMessageField = new javax.swing.JTextField();
        sendMessage = new javax.swing.JButton();
        createRoomButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        announcmementField = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        postAnnouncementButton = new javax.swing.JButton();
        refresh = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        mute = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        jLabel10.setText("Rooms:");

        roomSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        roomSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomSelectionActionPerformed(evt);
            }
        });

        roomOpenButton.setText("Open");
        roomOpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomOpenButtonActionPerformed(evt);
            }
        });

        roomCloseButton.setText("Close");
        roomCloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomCloseButtonActionPerformed(evt);
            }
        });

        jLabel11.setText("Rooms");

        jLabel12.setText("Name:");

        jLabel13.setText("Type:");

        roomTypeDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        privateCheckbox.setText("Private");
        privateCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                privateCheckboxActionPerformed(evt);
            }
        });

        roomPassword.setEnabled(false);

        jLabel15.setText("Password:");

        jLabel14.setText("Connections");

        playerSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        playerSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerSelectionActionPerformed(evt);
            }
        });

        banCheckbox.setText("Ban");

        banKickButton.setText("Kick");
        banKickButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                banKickButtonActionPerformed(evt);
            }
        });

        jLabel17.setText("Send One-Way Message:");

        sendMessage.setText("Send");
        sendMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageActionPerformed(evt);
            }
        });

        createRoomButton.setText("Create");
        createRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRoomButtonActionPerformed(evt);
            }
        });

        jLabel19.setText("Server Announcements:");

        postAnnouncementButton.setText("Post");
        postAnnouncementButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postAnnouncementButtonActionPerformed(evt);
            }
        });

        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        jLabel1.setText("As entries will not update while editing, refresh using the button:");

        mute.setText("(Un)Mute");
        mute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                muteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AdminPanelLayout = new javax.swing.GroupLayout(AdminPanel);
        AdminPanel.setLayout(AdminPanelLayout);
        AdminPanelLayout.setHorizontalGroup(
            AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdminPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AdminPanelLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2))
                    .addComponent(jSeparator1)
                    .addGroup(AdminPanelLayout.createSequentialGroup()
                        .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AdminPanelLayout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator3))
                            .addGroup(AdminPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(roomSelection, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(roomOpenButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(roomCloseButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AdminPanelLayout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator4))
                            .addGroup(AdminPanelLayout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(playerSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(banCheckbox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(banKickButton, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mute))
                            .addGroup(AdminPanelLayout.createSequentialGroup()
                                .addComponent(announcmementField, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(postAnnouncementButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(AdminPanelLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(oneWayMessageField, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sendMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(AdminPanelLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(AdminPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addGap(18, 18, 18)
                                        .addComponent(roomName))
                                    .addGroup(AdminPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addGap(24, 24, 24)
                                        .addComponent(roomTypeDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AdminPanelLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(createRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(AdminPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(privateCheckbox)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(roomPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AdminPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AdminPanelLayout.createSequentialGroup()
                                .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(164, 164, 164))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AdminPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(123, 123, 123))))))
        );
        AdminPanelLayout.setVerticalGroup(
            AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdminPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomOpenButton)
                    .addComponent(roomCloseButton)
                    .addComponent(jLabel10)
                    .addComponent(roomSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AdminPanelLayout.createSequentialGroup()
                        .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AdminPanelLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(roomTypeDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(AdminPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(roomPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addComponent(privateCheckbox)))
                    .addGroup(AdminPanelLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(createRoomButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(banCheckbox)
                    .addComponent(banKickButton)
                    .addComponent(mute)
                    .addComponent(playerSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(oneWayMessageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendMessage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(announcmementField)
                    .addComponent(postAnnouncementButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refresh)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(AdminPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(AdminPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void roomSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomSelectionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomSelectionActionPerformed

    private void roomOpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomOpenButtonActionPerformed
        if (adminController) {
            try {
                String roomselect = (String) roomSelection.getSelectedItem();
                controller.openRoom(roomselect);
                Message openRoomMsg = new Message("System", controller.getUsername(), roomselect + " is now opened", 2);
                controller.updateChatLog(openRoomMsg);
                initilizeAdminContents();
            } catch (RemoteException e) {

            }
        }
    }//GEN-LAST:event_roomOpenButtonActionPerformed

    private void roomCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomCloseButtonActionPerformed
        if (adminController) {
            try {
                String roomselect = (String) roomSelection.getSelectedItem();
                controller.closeRoom(roomselect);
                Message closeRoomMsg = new Message("System", controller.getUsername(), roomselect + " is now closed", 2);
                controller.updateChatLog(closeRoomMsg);
                initilizeAdminContents();
            } catch (RemoteException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_roomCloseButtonActionPerformed

    private void privateCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_privateCheckboxActionPerformed
        if (roomPassword.isEnabled()) {
            roomPassword.setEnabled(false);
        } else {
            roomPassword.setEnabled(true);
        }
    }//GEN-LAST:event_privateCheckboxActionPerformed

    private void playerSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerSelectionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_playerSelectionActionPerformed

    private void banKickButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_banKickButtonActionPerformed
        if (adminController) {
            try {
                Message kickStatus = new Message("System", controller.getUsername(), "Cannot kick/ban that user", 2);
                String connectionSelectUsername = (String) playerSelection.getSelectedItem();
                boolean banned = banCheckbox.isSelected();
                controller.kickUser(connectionSelectUsername, banned);
                kickStatus.setMsgText("That user has been kicked/banned");
                controller.updateChatLog(kickStatus);
                initilizeAdminContents();
            } catch (RemoteException e) {
            }
        }
    }//GEN-LAST:event_banKickButtonActionPerformed

    private void sendMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageActionPerformed
        String msg = oneWayMessageField.getText();
        String username = (String) playerSelection.getSelectedItem();
        Message sendMessage = new Message(username, username, msg, 4);
        if (msg != null) {
            try {
                controller.sendAdminMessage(sendMessage, username);
                controller.updateChatLog(sendMessage);
            } catch (RemoteException ex) {
                Logger.getLogger(SwingGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_sendMessageActionPerformed

    private void createRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRoomButtonActionPerformed
        if (adminController) {
            try {
                Message createRoomStatus = new Message("System", controller.getUsername(), "Room creation has failed", 2);
                String newRoomName = roomName.getText();
                String newRoomTypeName = (String) roomTypeDropdown.getSelectedItem();
                int roomType = 0;
                switch (newRoomTypeName) {
                    case "TextRoom":
                        roomType = 1;
                        break;
                    case "ConferenceRoom":
                        roomType = 2;
                        break;
                }
                if (privateCheckbox.isSelected()) {
                    String roomPasswordptext = roomPassword.getText();
                    if (roomPasswordptext != null) {
                        controller.addRoom(newRoomName, roomType, roomPasswordptext);
                        createRoomStatus.setMsgText("Private room successfully created");
                    } else {
                        createRoomStatus.setMsgText("You must enter a password to create a private room");
                    }
                } else {
                    controller.addRoom(newRoomName, roomType);
                    createRoomStatus.setMsgText("Open room successfully created");
                }
                controller.updateChatLog(createRoomStatus);
                initilizeAdminContents();
            } catch (RemoteException e) {

            }
        }
    }//GEN-LAST:event_createRoomButtonActionPerformed

    private void postAnnouncementButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postAnnouncementButtonActionPerformed
        if (adminController) {
            try {
                String msg = announcmementField.getText();
                if (msg != null) {
                    controller.postAnnouncment(msg);
                    controller.updateChatLog(new Message("System", controller.getUsername(), "You have posted a new announcement!", 2));
                    announcmementField.setText("");
                }
            } catch (RemoteException e) {

            }
        }
    }//GEN-LAST:event_postAnnouncementButtonActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        initilizeAdminContents();
    }//GEN-LAST:event_refreshActionPerformed

    private void muteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_muteActionPerformed
        if (adminController) {
            try {
                Message muteStatus = new Message("System", controller.getUsername(), "Cannot mute that user", 2);
                String connectionSelectUsername = (String) playerSelection.getSelectedItem();
                if (!controller.isMuted(connectionSelectUsername))
                {
                    controller.censorUser(connectionSelectUsername);
                    muteStatus.setMsgText("User: " + connectionSelectUsername + " has been muted");
                } else {
                    controller.uncensorUser(connectionSelectUsername);
                    muteStatus.setMsgText("User: " + connectionSelectUsername + " has been unmuted");
                }
                controller.updateChatLog(muteStatus);
            } catch (RemoteException ex) {
                 Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
             }
        }
    }//GEN-LAST:event_muteActionPerformed

    private void initilizeAdminContents() {
        roomSelection.removeAllItems();
        roomTypeDropdown.removeAllItems();
        playerSelection.removeAllItems();
        adminController = true;
        try {
            List<String> roomNames = controller.getRoomNames();
            for (String name : roomNames) {
                roomSelection.addItem(name);
            }
            List<String> supportedRoomTypes = controller.getSupportedRoomTypes();
            for (String roomType : supportedRoomTypes) {
                roomTypeDropdown.addItem(roomType);
            }
            List<String> activeUserNames = controller.getAllConnectedUsernames();
            for (String username : activeUserNames) {
                playerSelection.addItem(username);
            }
        } catch (RemoteException e) {

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AdminPanel;
    private javax.swing.JTextField announcmementField;
    private javax.swing.JCheckBox banCheckbox;
    private javax.swing.JButton banKickButton;
    private javax.swing.JButton createRoomButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JButton mute;
    private javax.swing.JTextField oneWayMessageField;
    private javax.swing.JComboBox<String> playerSelection;
    private javax.swing.JButton postAnnouncementButton;
    private javax.swing.JCheckBox privateCheckbox;
    private javax.swing.JButton refresh;
    private javax.swing.JButton roomCloseButton;
    private javax.swing.JTextField roomName;
    private javax.swing.JButton roomOpenButton;
    private javax.swing.JTextField roomPassword;
    private javax.swing.JComboBox<String> roomSelection;
    private javax.swing.JComboBox<String> roomTypeDropdown;
    private javax.swing.JButton sendMessage;
    // End of variables declaration//GEN-END:variables
}
