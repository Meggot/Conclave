/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package conclaveclient;

import conclaveclient.Conference.StreamClientAgent;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import model.Announcement;
import model.ConnectionsLog;
import model.ConnectionEntry;
import model.Message;
import conclaveclient.Conference.ListeningClient;
import conclaveclient.Conference.StreamingServer;
import conclaveclient.Conference.display.BroadcastPanel;
import conclaveclient.Conference.display.VideoPanel;
import conclaveinterfaces.IUserInterface;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JSeparator;
import javax.swing.KeyStroke;
import javax.swing.SwingConstants;

/**
 *
 * @author BradleyW
 */
public class SwingGUI extends javax.swing.JFrame {

    public IUserInterface client;
    private boolean inRoom;
    private int lastMessageLine;
    private ArrayList<String> chatlogViewCategories = new ArrayList<String>();
    private BroadcastPanel broadcastPanel;
    private static int lastExport;

    public SwingGUI(IUserInterface ui) {
        try {
            ui.connect(); //Ensure the UI does not get thrown from the server.
            this.setTitle("Conclave");
            lastExport = 0;
            initComponents();
            client = ui;
            inRoom = false;
            welcomeLabel.setText("Welcome to Conclave, " + ui.getUsername());
            setConnectionsArea(client.viewAllConnections());
            buildFrontpage();
            setVisible(true);
            chatlogViewCategories.add("Room");
            chatlogViewCategories.add("System");
            chatlogViewCategories.add("Private");
            chatlogViewCategories.add("Admin");
            if (client.getType() == 1) {
                updateChatlog(new Message("Conclave", "Conclave", "You have logged in as a User", 2));
            } else if (client.getType() == 2) {
                updateChatlog(new Message("Conclave", "Conclave", "You have logged in as an Admin", 2));
                initilizeAdminTab();
            }
            startUpdates();
            pack();
            Runtime.getRuntime().addShutdownHook(new Thread() {
                @Override
                public void run() {
                    try {
                        System.out.println("DISCONNECTING");
                        client.leaveServer();
                    } catch (RemoteException ex) {
                        Logger.getLogger(SwingGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jLabel1 = new javax.swing.JLabel();
        passwordFormPanel = new javax.swing.JPanel();
        roomPasswordEntry = new javax.swing.JTextField();
        roomPasswordSubmit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        privateMsgPanel = new javax.swing.JPanel();
        pmField = new javax.swing.JTextField();
        pmSendButton = new java.awt.Button();
        pmLabel = new javax.swing.JLabel();
        filtersMsg = new javax.swing.ButtonGroup();
        frontpage = new javax.swing.JPanel();
        announcments = new java.awt.List();
        jScrollPane1 = new javax.swing.JScrollPane();
        connectionsScrollPanel = new javax.swing.JScrollPane();
        connectionsPanel = new javax.swing.JPanel();
        textLog = new java.awt.TextArea();
        sendMessageButton = new javax.swing.JButton();
        welcomeLabel = new javax.swing.JLabel();
        refreshConnections = new javax.swing.JButton();
        disconnectButton = new javax.swing.JButton();
        leaveRoomButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        textInputArea = new javax.swing.JTextArea();
        exportChatLogButton = new javax.swing.JButton();
        chatlogFilterPanel = new javax.swing.JPanel();
        roomFilterCheckbox = new javax.swing.JCheckBox();
        systemFilterCheckbox = new javax.swing.JCheckBox();
        privateFilterCheckbox = new javax.swing.JCheckBox();
        adminFilterCheckbox = new javax.swing.JCheckBox();
        filterLabel = new javax.swing.JLabel();
        tabbedPanel = new javax.swing.JTabbedPane();
        interactablePanel = new javax.swing.JPanel();

        jMenuItem1.setText("jMenuItem1");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jLabel1.setText("jLabel1");

        roomPasswordEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomPasswordEntryActionPerformed(evt);
            }
        });

        roomPasswordSubmit.setText("Submit");
        roomPasswordSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomPasswordSubmitActionPerformed(evt);
            }
        });

        jLabel2.setText("Password:");

        jLabel3.setText("This is a private room.");

        javax.swing.GroupLayout passwordFormPanelLayout = new javax.swing.GroupLayout(passwordFormPanel);
        passwordFormPanel.setLayout(passwordFormPanelLayout);
        passwordFormPanelLayout.setHorizontalGroup(
            passwordFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, passwordFormPanelLayout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(passwordFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(passwordFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(passwordFormPanelLayout.createSequentialGroup()
                            .addGap(16, 16, 16)
                            .addComponent(roomPasswordSubmit)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, passwordFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(roomPasswordEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(25, 25, 25))
            .addComponent(jSeparator1)
        );
        passwordFormPanelLayout.setVerticalGroup(
            passwordFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, passwordFormPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roomPasswordEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roomPasswordSubmit)
                .addContainerGap())
        );

        pmSendButton.setLabel("Send");
        pmSendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmSendButtonActionPerformed(evt);
            }
        });

        pmLabel.setText("You are sending a private message to: ");

        javax.swing.GroupLayout privateMsgPanelLayout = new javax.swing.GroupLayout(privateMsgPanel);
        privateMsgPanel.setLayout(privateMsgPanelLayout);
        privateMsgPanelLayout.setHorizontalGroup(
            privateMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(privateMsgPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(privateMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(privateMsgPanelLayout.createSequentialGroup()
                        .addComponent(pmField, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pmSendButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pmLabel))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        privateMsgPanelLayout.setVerticalGroup(
            privateMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(privateMsgPanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(pmLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(privateMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pmField)
                    .addComponent(pmSendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout frontpageLayout = new javax.swing.GroupLayout(frontpage);
        frontpage.setLayout(frontpageLayout);
        frontpageLayout.setHorizontalGroup(
            frontpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(announcments, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
        );
        frontpageLayout.setVerticalGroup(
            frontpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(announcments, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        connectionsScrollPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        connectionsScrollPanel.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                connectionsScrollPanelComponentAdded(evt);
            }
        });

        javax.swing.GroupLayout connectionsPanelLayout = new javax.swing.GroupLayout(connectionsPanel);
        connectionsPanel.setLayout(connectionsPanelLayout);
        connectionsPanelLayout.setHorizontalGroup(
            connectionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 610, Short.MAX_VALUE)
        );
        connectionsPanelLayout.setVerticalGroup(
            connectionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 291, Short.MAX_VALUE)
        );

        connectionsScrollPanel.setViewportView(connectionsPanel);

        textLog.setEditable(false);

        sendMessageButton.setText("-->");
        sendMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageButtonActionPerformed(evt);
            }
        });
        sendMessageButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sendMessageButtonKeyPressed(evt);
            }
        });

        welcomeLabel.setText("Welcome to Conclave");

        refreshConnections.setText("Refresh Connections");
        refreshConnections.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshConnectionsActionPerformed(evt);
            }
        });

        disconnectButton.setText("Disconnect");
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        leaveRoomButton.setText("Leave Room");
        leaveRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaveRoomButtonActionPerformed(evt);
            }
        });

        textInputArea.setColumns(20);
        textInputArea.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        textInputArea.setRows(5);
        jScrollPane3.setViewportView(textInputArea);

        exportChatLogButton.setText("Export ChatLog");
        exportChatLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportChatLogButtonActionPerformed(evt);
            }
        });

        roomFilterCheckbox.setSelected(true);
        roomFilterCheckbox.setText("View Room Messages");
        roomFilterCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomFilterCheckboxActionPerformed(evt);
            }
        });

        systemFilterCheckbox.setSelected(true);
        systemFilterCheckbox.setText("View System Messages");
        systemFilterCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                systemFilterCheckboxActionPerformed(evt);
            }
        });

        privateFilterCheckbox.setSelected(true);
        privateFilterCheckbox.setText("View Private Messages");
        privateFilterCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                privateFilterCheckboxActionPerformed(evt);
            }
        });

        adminFilterCheckbox.setSelected(true);
        adminFilterCheckbox.setText("View Admin Messages");
        adminFilterCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminFilterCheckboxActionPerformed(evt);
            }
        });

        filterLabel.setText("Filter Chatlog messages:");

        javax.swing.GroupLayout chatlogFilterPanelLayout = new javax.swing.GroupLayout(chatlogFilterPanel);
        chatlogFilterPanel.setLayout(chatlogFilterPanelLayout);
        chatlogFilterPanelLayout.setHorizontalGroup(
            chatlogFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chatlogFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(chatlogFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(systemFilterCheckbox)
                    .addComponent(privateFilterCheckbox)
                    .addComponent(adminFilterCheckbox)
                    .addComponent(roomFilterCheckbox)
                    .addComponent(filterLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        chatlogFilterPanelLayout.setVerticalGroup(
            chatlogFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, chatlogFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filterLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(roomFilterCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(systemFilterCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(privateFilterCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(adminFilterCheckbox))
        );

        interactablePanel.setMaximumSize(new java.awt.Dimension(1000, 800));
        tabbedPanel.addTab("Main", interactablePanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(refreshConnections, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(disconnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(leaveRoomButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exportChatLogButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chatlogFilterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(connectionsScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(welcomeLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendMessageButton))
                    .addComponent(textLog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(tabbedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 745, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(welcomeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectionsScrollPanel))
                    .addComponent(tabbedPanel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(refreshConnections, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(disconnectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(leaveRoomButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportChatLogButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chatlogFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textLog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(sendMessageButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE))))
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        try {
            if (inRoom) {
                if (client.getRoomType() == 2 && broadcastPanel != null) {
                    broadcastPanel.stop();
                }
                client.leaveRoom();
            }
            client.disconnect();
            inRoom = false;
        } catch (RemoteException e) {
            e.printStackTrace();
        }
        System.exit(-1);
    }//GEN-LAST:event_disconnectButtonActionPerformed

    private void leaveRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaveRoomButtonActionPerformed
        try {
            if (inRoom) {
                if (client.getRoomType() == 2 && broadcastPanel != null) {
                    broadcastPanel.stop();
                }
                client.leaveRoom();
                inRoom = false;
                buildFrontpage();
            } else {
                client.updateChatLog(new Message("System", client.getUsername(), "You are not in a room", 2));
            }
        } catch (RemoteException e) {

        }
    }//GEN-LAST:event_leaveRoomButtonActionPerformed

    private void exportChatLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportChatLogButtonActionPerformed
        try {
            String exportFileName = "ChatLog_" + client.getUsername() + lastExport++ + ".txt";
            FileWriter fileWriter = new FileWriter(exportFileName);
            BufferedWriter br = new BufferedWriter(fileWriter);
            ArrayList<Message> lineWriter = new ArrayList(client.getChatlogUpdates(0));
            String line = "";
            for (Message message : lineWriter) {
                line = message.msgDisplay();
                br.write(line);
                br.newLine();
            }
            br.close();
            client.updateChatLog(new Message("System", client.getUsername(), "You have exported a chatlog, saved as: " + exportFileName, 2));
        } catch (RemoteException e) {
            e.printStackTrace();
        } catch (IOException ex) {
            Logger.getLogger(SwingGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportChatLogButtonActionPerformed

    private void sendMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageButtonActionPerformed
        // TODO add your handling code here:
        try {
            if (inRoom) {
                client.postMessage(textInputArea.getText());
                textInputArea.setText("");
            }
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_sendMessageButtonActionPerformed

    private void refreshConnectionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshConnectionsActionPerformed
        try {
            refreshConnections();
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_refreshConnectionsActionPerformed

    private void connectionsScrollPanelComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_connectionsScrollPanelComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_connectionsScrollPanelComponentAdded

    private void roomPasswordSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomPasswordSubmitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomPasswordSubmitActionPerformed

    private void roomPasswordEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomPasswordEntryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomPasswordEntryActionPerformed

    private void pmSendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmSendButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pmSendButtonActionPerformed

    private void roomFilterCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomFilterCheckboxActionPerformed
        if (roomFilterCheckbox.isSelected()) {
            chatlogViewCategories.add("Room");
        } else {
            chatlogViewCategories.remove("Room");
        }
        resetChatlogView();
    }//GEN-LAST:event_roomFilterCheckboxActionPerformed

    private void systemFilterCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_systemFilterCheckboxActionPerformed
        if (systemFilterCheckbox.isSelected()) {
            chatlogViewCategories.add("System");
        } else {
            chatlogViewCategories.remove("System");
        }
        resetChatlogView();
    }//GEN-LAST:event_systemFilterCheckboxActionPerformed

    private void privateFilterCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_privateFilterCheckboxActionPerformed
        if (privateFilterCheckbox.isSelected()) {
            chatlogViewCategories.add("Private");
        } else {
            chatlogViewCategories.remove("Private");
        }
        resetChatlogView();
    }//GEN-LAST:event_privateFilterCheckboxActionPerformed

    private void adminFilterCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminFilterCheckboxActionPerformed
        if (adminFilterCheckbox.isSelected()) {
            chatlogViewCategories.add("Admin");
        } else {
            chatlogViewCategories.remove("Admin");
        }
        resetChatlogView();
    }//GEN-LAST:event_adminFilterCheckboxActionPerformed

    private void sendMessageButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sendMessageButtonKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_sendMessageButtonKeyPressed

    private void resetChatlogView() {
        textLog.setText("");
        lastMessageLine = 0;
    }

    private void buildFrontpage() {
        interactablePanel.removeAll();
        interactablePanel.add(frontpage);
        updateFrontpage();
    }

    private void updateFrontpage() {
        try {
            announcments.removeAll();
            for (Announcement update : client.getFrontpage()) {
                String line = update.getName() + ": " + update.getText();
                announcments.add(line);
            }
        } catch (RemoteException ex) {
            Logger.getLogger(SwingGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void interactConnection(java.awt.event.ActionEvent evt, String entryName) {
        try {
            if (!inRoom) {
                if (client.hasPassword(entryName)) {
                    final JFrame newFrame = new JFrame();
                    final String roomPasswordName = entryName;
                    //newFrame.setPreferredSize(new Dimension(300, 400));
                    //passwordFormPanel.setPreferredSize(new Dimension(300, 400));
                    roomPasswordSubmit.addActionListener(new java.awt.event.ActionListener() {
                        @Override
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            validatePassword(roomPasswordName, roomPasswordEntry.getText());
                            roomPasswordEntry.setText("");
                            newFrame.setVisible(false);
                        }
                    });
                    newFrame.add(passwordFormPanel);
                    newFrame.pack();
                    newFrame.setVisible(true);
                } else {
                    joinRoom(entryName);
                }
            } else if (inRoom) {
                final JFrame newFrame = new JFrame();
                final String recipietUsername = entryName;
                final String senderUsername = client.getUsername();
                //newFrame.setPreferredSize(new Dimension(300, 400));
                //passwordFormPanel.setPreferredSize(new Dimension(300, 400));
                pmSendButton.addActionListener(new java.awt.event.ActionListener() {
                    @Override
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        try {
                            client.sendPrivateMessage(pmField.getText(), recipietUsername);
                            pmField.setText("");
                            newFrame.setVisible(false);
                        } catch (RemoteException e) {
                            Message newMessage = new Message("System", senderUsername, "That user could not be reached", 2);
                            try {
                                client.updateChatLog(newMessage);
                            } catch (RemoteException ex) {
                                Logger.getLogger(SwingGUI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                });
                newFrame.add(privateMsgPanel);
                newFrame.pack();
                newFrame.setVisible(true);
            }
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    private void validatePassword(String entryName, String passwordEntry) {
        try {
            String msg = "Error";
            boolean validated = client.joinRoom(entryName, passwordEntry);
            if (validated) {
                msg = "Correct Password";
                interactablePanel.removeAll();
                inRoom = true;
                if (client.getRoomType() == 2) {
                    buildBroadcastPanel();
                }
            } else {
                msg = "Incorrect password";
            }
            client.updateChatLog(new Message("System", client.getUsername(), msg, 2));
        } catch (RemoteException e) {

        }
    }

    private void joinRoom(String entryName) {
        try {
            boolean joined = client.joinRoom(entryName);
            if (joined) {
                interactablePanel.removeAll();
                inRoom = true;
                if (client.getRoomType() == 2) {
                    buildBroadcastPanel();
                }
            } else {
                 client.updateChatLog(new Message("System", client.getUsername(), "You cannot connect to that room", 2));
            }
        } catch (RemoteException e) {

        }
    }

    private void setConnectionsArea(ConnectionsLog connections) {
        connectionsPanel.removeAll();
        connectionsPanel.setLayout(new BoxLayout(connectionsPanel, BoxLayout.PAGE_AXIS));
        connectionsPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));
        connectionsPanel.add(Box.createHorizontalGlue());
        connectionsPanel.add(Box.createRigidArea(new Dimension(10, 0)));
        int i = 0;
        for (ConnectionEntry entry : connections.getAllConnections()) {
            final String entryName = entry.getName();
            String label = i + ":" + entryName;
            JLabel connectionDesc = new JLabel(entry.getDesc());
            JButton newInteractionButton = new JButton(label);
            newInteractionButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    interactConnection(evt, entryName);
                }
            });
            connectionsPanel.add(newInteractionButton);
            connectionsPanel.add(connectionDesc);
            connectionsPanel.add(new JSeparator(SwingConstants.HORIZONTAL));
            i++;
        }
        pack();
    }

    private void startUpdates() {
        Thread updates;
        updates = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    while (client.isConnected()) {
                        inRoom = client.inRoom();
                        if (client.hasConnectionsUpdated()) {
                            refreshConnections();
                        }
                        if (client.hasFrontpageUpdated()) {
                            updateFrontpage();
                        }
                        int lstMsgClient = client.getLastMessageLine();
                        if (lstMsgClient > lastMessageLine) {
                            LinkedList<Message> newMessages = client.getChatlogUpdates(lastMessageLine);
                            for (Message newMessage : newMessages) {
                                if (newMessage != null) {
                                    System.out.println(newMessage.msgDisplay());
                                    updateChatlog(newMessage);
                                }
                            }
                            lastMessageLine = lstMsgClient;
                        }
                        Thread.sleep(200);
                    }
                    updateChatlog(new Message("System", client.getUsername(), "You have been disconnected, Conclave will exit soon.", 2));
                    if (inRoom) {
                        if (client.getRoomType() == 2 && broadcastPanel != null) {
                            broadcastPanel.stop();
                        }
                        client.leaveRoom();
                    }
                    inRoom = false;
                    Thread.sleep(3000);
                    System.exit(-1);
                } catch (RemoteException | InterruptedException e) {
                }
            }
        });
        updates.start();
    }

    private void updateChatlog(Message msg) {
        if (msg != null && chatlogViewCategories.contains(msg.getType())) {
            textLog.append(msg.msgDisplay());
            textLog.append("\n");
            pack();
        }
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox adminFilterCheckbox;
    private java.awt.List announcments;
    private javax.swing.JPanel chatlogFilterPanel;
    private javax.swing.JPanel connectionsPanel;
    private javax.swing.JScrollPane connectionsScrollPanel;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JButton exportChatLogButton;
    private javax.swing.JLabel filterLabel;
    private javax.swing.ButtonGroup filtersMsg;
    private javax.swing.JPanel frontpage;
    private javax.swing.JPanel interactablePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton leaveRoomButton;
    private javax.swing.JPanel passwordFormPanel;
    private javax.swing.JTextField pmField;
    private javax.swing.JLabel pmLabel;
    private java.awt.Button pmSendButton;
    private javax.swing.JCheckBox privateFilterCheckbox;
    private javax.swing.JPanel privateMsgPanel;
    private javax.swing.JButton refreshConnections;
    private javax.swing.JCheckBox roomFilterCheckbox;
    private javax.swing.JTextField roomPasswordEntry;
    private javax.swing.JButton roomPasswordSubmit;
    private javax.swing.JButton sendMessageButton;
    private javax.swing.JCheckBox systemFilterCheckbox;
    private javax.swing.JTabbedPane tabbedPanel;
    private javax.swing.JTextArea textInputArea;
    private java.awt.TextArea textLog;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables

    private void initilizeAdminTab() {
        AdminPanel adminPanel = new AdminPanel(client);
        tabbedPanel.add("Admin", adminPanel);
    }

    private void buildBroadcastPanel() {
        broadcastPanel = new BroadcastPanel(client);
        interactablePanel.removeAll();
        interactablePanel.add(broadcastPanel);
        pack();
    }

    private void refreshConnections() throws RemoteException {
        ConnectionsLog connectionsLog = client.viewAllConnections();
        setConnectionsArea(connectionsLog);
    }
}
