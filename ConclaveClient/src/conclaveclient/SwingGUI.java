/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package conclaveclient;

import conclave.interfaces.UserInterface;
import conclave.model.ConnectionsLog;
import conclave.model.ConnectionEntry;
import conclave.model.Message;
import java.awt.Dimension;
import java.rmi.RemoteException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JSeparator;
import javax.swing.SwingConstants;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author BradleyW
 */
public class SwingGUI extends javax.swing.JFrame {

    private ArrayList<JButton> connectionButtons = new ArrayList<JButton>();
    public UserInterface client;
    private boolean inRoom;
    private int lastMessageLine;

    public SwingGUI(UserInterface ui) {
        try {
            client = ui;
            inRoom = false;
            initComponents();
            welcomeLabel.setText("Welcome to Conclave, " + ui.getUsername());
            setConnectionsArea(client.viewAllConnections());
            setVisible(true);
            startChatLogUpdates();
            formatTextSuffix();
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }
    
    private void addMsgFilter()
    {
        chatlogFilters.add(filtersMsg);
    }
    
    private void formatTextSuffix()
    {
        try {
            String username = client.getUsername();
            MaskFormatter usernameMask = new MaskFormatter(username + ": ");
            usernameMask.install(textInputArea);
            textInputArea.setColumns(20);
        } catch (RemoteException e)
        {
            
        } catch (ParseException e){
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jLabel1 = new javax.swing.JLabel();
        passwordFormPanel = new javax.swing.JPanel();
        roomPasswordEntry = new javax.swing.JTextField();
        roomPasswordSubmit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        privateMsgPanel = new javax.swing.JPanel();
        pmField = new javax.swing.JTextField();
        pmSendButton = new java.awt.Button();
        pmLabel = new javax.swing.JLabel();
        filtersMsg = new javax.swing.ButtonGroup();
        jScrollPane2 = new javax.swing.JScrollPane();
        interactablePanel = new javax.swing.JScrollPane();
        connectionsScrollPanel = new javax.swing.JScrollPane();
        connectionsPanel = new javax.swing.JPanel();
        textLog = new java.awt.TextArea();
        jPanel1 = new javax.swing.JPanel();
        sendMessageButton = new javax.swing.JButton();
        welcomeLabel = new javax.swing.JLabel();
        refreshConnections = new javax.swing.JButton();
        disconnectButton = new javax.swing.JButton();
        leaveRoomButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        exportChatLogButton = new javax.swing.JButton();
        chatlogFilters = new javax.swing.JPanel();

        jMenuItem1.setText("jMenuItem1");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jLabel1.setText("jLabel1");

        roomPasswordEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomPasswordEntryActionPerformed(evt);
            }
        });

        roomPasswordSubmit.setText("Submit");
        roomPasswordSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomPasswordSubmitActionPerformed(evt);
            }
        });

        jLabel2.setText("Password:");

        jLabel3.setText("This is a private room.");

        javax.swing.GroupLayout passwordFormPanelLayout = new javax.swing.GroupLayout(passwordFormPanel);
        passwordFormPanel.setLayout(passwordFormPanelLayout);
        passwordFormPanelLayout.setHorizontalGroup(
            passwordFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, passwordFormPanelLayout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(passwordFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(passwordFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(passwordFormPanelLayout.createSequentialGroup()
                            .addGap(16, 16, 16)
                            .addComponent(roomPasswordSubmit)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, passwordFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(roomPasswordEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(25, 25, 25))
            .addComponent(jSeparator1)
        );
        passwordFormPanelLayout.setVerticalGroup(
            passwordFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, passwordFormPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roomPasswordEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roomPasswordSubmit)
                .addContainerGap())
        );

        pmSendButton.setLabel("Send");
        pmSendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmSendButtonActionPerformed(evt);
            }
        });

        pmLabel.setText("You are sending a private message to: ");

        javax.swing.GroupLayout privateMsgPanelLayout = new javax.swing.GroupLayout(privateMsgPanel);
        privateMsgPanel.setLayout(privateMsgPanelLayout);
        privateMsgPanelLayout.setHorizontalGroup(
            privateMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(privateMsgPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(privateMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(privateMsgPanelLayout.createSequentialGroup()
                        .addComponent(pmField, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pmSendButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pmLabel))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        privateMsgPanelLayout.setVerticalGroup(
            privateMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(privateMsgPanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(pmLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(privateMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pmField)
                    .addComponent(pmSendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane2.setViewportView(interactablePanel);

        connectionsScrollPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        connectionsScrollPanel.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                connectionsScrollPanelComponentAdded(evt);
            }
        });

        javax.swing.GroupLayout connectionsPanelLayout = new javax.swing.GroupLayout(connectionsPanel);
        connectionsPanel.setLayout(connectionsPanelLayout);
        connectionsPanelLayout.setHorizontalGroup(
            connectionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 173, Short.MAX_VALUE)
        );
        connectionsPanelLayout.setVerticalGroup(
            connectionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 255, Short.MAX_VALUE)
        );

        connectionsScrollPanel.setViewportView(connectionsPanel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        sendMessageButton.setText("-->");
        sendMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageButtonActionPerformed(evt);
            }
        });

        welcomeLabel.setText("Welcome to Conclave");

        refreshConnections.setText("Refresh");
        refreshConnections.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshConnectionsActionPerformed(evt);
            }
        });

        disconnectButton.setText("Disconnect");
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        leaveRoomButton.setText("Leave Room");
        leaveRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaveRoomButtonActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        exportChatLogButton.setText("Export ChatLog");
        exportChatLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportChatLogButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout chatlogFiltersLayout = new javax.swing.GroupLayout(chatlogFilters);
        chatlogFilters.setLayout(chatlogFiltersLayout);
        chatlogFiltersLayout.setHorizontalGroup(
            chatlogFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        chatlogFiltersLayout.setVerticalGroup(
            chatlogFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(connectionsScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 6, Short.MAX_VALUE))
                    .addComponent(refreshConnections, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(disconnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(leaveRoomButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exportChatLogButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chatlogFilters, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(textLog, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendMessageButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(311, 311, 311)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(welcomeLabel)
                .addGap(346, 346, 346))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(welcomeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(connectionsScrollPanel)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textLog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 81, Short.MAX_VALUE)
                        .addComponent(refreshConnections, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(disconnectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(leaveRoomButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportChatLogButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chatlogFilters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(sendMessageButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        try {
            client.disconnect();
             inRoom = false;
        } catch (RemoteException e) {
            e.printStackTrace();
        }
        System.exit(-1);
    }//GEN-LAST:event_disconnectButtonActionPerformed

    private void leaveRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaveRoomButtonActionPerformed
        try {
            if (inRoom) {
                client.leaveRoom();
                inRoom = false;
            }
        } catch (RemoteException e) {

        }
    }//GEN-LAST:event_leaveRoomButtonActionPerformed

    private void exportChatLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportChatLogButtonActionPerformed
        try {
            System.out.println(client.exportChatLog());
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_exportChatLogButtonActionPerformed

    private void sendMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageButtonActionPerformed
        // TODO add your handling code here:
        try {
            if (inRoom) {
                client.postMessage(textInputArea.getText());
            }
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_sendMessageButtonActionPerformed

    private void refreshConnectionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshConnectionsActionPerformed
        try {
            ConnectionsLog connectionsLog = client.viewAllConnections();
            setConnectionsArea(connectionsLog);
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_refreshConnectionsActionPerformed

    private void connectionsScrollPanelComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_connectionsScrollPanelComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_connectionsScrollPanelComponentAdded

    private void roomPasswordSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomPasswordSubmitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomPasswordSubmitActionPerformed

    private void roomPasswordEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomPasswordEntryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomPasswordEntryActionPerformed

    private void pmSendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmSendButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pmSendButtonActionPerformed

    private void interactConnection(java.awt.event.ActionEvent evt, String entryName) {
        try {
            if (!inRoom) {
                if (client.hasPassword(entryName)) {
                    final JFrame newFrame = new JFrame();
                    final String roomPasswordName = entryName;
                    //newFrame.setPreferredSize(new Dimension(300, 400));
                    //passwordFormPanel.setPreferredSize(new Dimension(300, 400));
                    roomPasswordSubmit.addActionListener(new java.awt.event.ActionListener() {
                        @Override
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            validatePassword(roomPasswordName, roomPasswordEntry.getText());
                            roomPasswordEntry.setText("");
                            newFrame.setVisible(false);
                        }
                    });
                    newFrame.add(passwordFormPanel);
                    newFrame.pack();
                    newFrame.setVisible(true);
                } else {
                    joinRoom(entryName);
                }
            } else if (inRoom) {
                final JFrame newFrame = new JFrame();
                final String recipietUsername = entryName;
                final String senderUsername = client.getUsername();
                //newFrame.setPreferredSize(new Dimension(300, 400));
                //passwordFormPanel.setPreferredSize(new Dimension(300, 400));
                pmSendButton.addActionListener(new java.awt.event.ActionListener() {
                    @Override
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        try {
                            client.sendPrivateMessage(pmField.getText(), recipietUsername);
                            pmField.setText("");
                            newFrame.setVisible(false);
                        } catch (RemoteException e) {
                            Message newMessage = new Message(senderUsername, senderUsername, "That user could not be reached", 2);
                            updateChatlog(newMessage);
                        }
                    }
                });
                newFrame.add(privateMsgPanel);
                newFrame.pack();
                newFrame.setVisible(true);
            }
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    private void validatePassword(String entryName, String passwordEntry) {
        try {
            boolean validated = client.joinRoom(entryName, passwordEntry);
            if (validated) {
                joinRoom(entryName);
            } else {
                String incorrectMsg = "Incorrect password";
                Message msg = new Message(client.getUsername(), client.getUsername(), incorrectMsg, 2);
                updateChatlog(msg);
            }
        } catch (RemoteException e) {

        }
    }

    private void joinRoom(String entryName) {
        try {
            client.joinRoom(entryName);
            String message = "You have entered a room: " + client.getActiveRoomName();
            Message joinRoomMessage = new Message(client.getUsername(), client.getUsername(), message, 2);
            updateChatlog(joinRoomMessage);
            inRoom = true;
        } catch (RemoteException e) {

        }
    }

    private void setConnectionsArea(ConnectionsLog connections) {
        connectionsPanel.removeAll();
        connectionsPanel.setLayout(new BoxLayout(connectionsPanel, BoxLayout.PAGE_AXIS));
        connectionsPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));
        connectionsPanel.add(Box.createHorizontalGlue());
        connectionsPanel.add(Box.createRigidArea(new Dimension(10, 0)));
        int i = 0;
        for (ConnectionEntry entry : connections.getAllConnections()) {
            final String entryName = entry.getName();
            String label = i + ":" + entryName;
            JLabel connectionDesc = new JLabel(entry.getDesc());
            JButton newInteractionButton = new JButton(label);
            newInteractionButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    interactConnection(evt, entryName);
                }
            });
            connectionsPanel.add(newInteractionButton);
            connectionsPanel.add(connectionDesc);
            connectionsPanel.add(new JSeparator(SwingConstants.HORIZONTAL));
            i++;
        }
        pack();
    }

    private void startChatLogUpdates() {
        Thread chatLogUpdates = new Thread(new Runnable() {
            public void run() {
                try {
                    while (client.isConnected()) {
                        if (client.hasConnectionsUpdated()) {
                            setConnectionsArea(client.viewAllConnections());
                        }
                        int lstMsgClient = client.getLastMessageLine();
                        if (lstMsgClient > lastMessageLine) {
                            LinkedList<Message> newMessages = client.getChatlogUpdates(lastMessageLine);
                            for (Message newMessage : newMessages) {
                                if (newMessage != null) {
                                    System.out.println(newMessage.msgDisplay());
                                    updateChatlog(newMessage);
                                }
                            }
                        }
                        Thread.sleep(500);
                    }
                } catch (RemoteException e) {
                    e.printStackTrace();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        chatLogUpdates.start();
    }

    private void updateChatlog(Message msg) {
        try {
        if (msg != null) {
            textLog.append(msg.msgDisplay());
            textLog.append("\n");
            int lstMsgClient = client.getLastMessageLine();
            lastMessageLine = lstMsgClient;
            pack();
        }
        } catch (RemoteException e)
        {
            
        }
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chatlogFilters;
    private javax.swing.JPanel connectionsPanel;
    private javax.swing.JScrollPane connectionsScrollPanel;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JButton exportChatLogButton;
    private javax.swing.ButtonGroup filtersMsg;
    private javax.swing.JScrollPane interactablePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton leaveRoomButton;
    private javax.swing.JPanel passwordFormPanel;
    private javax.swing.JTextField pmField;
    private javax.swing.JLabel pmLabel;
    private java.awt.Button pmSendButton;
    private javax.swing.JPanel privateMsgPanel;
    private javax.swing.JButton refreshConnections;
    private javax.swing.JTextField roomPasswordEntry;
    private javax.swing.JButton roomPasswordSubmit;
    private javax.swing.JButton sendMessageButton;
    private java.awt.TextArea textLog;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables

}
