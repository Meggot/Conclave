/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package conclaveclient;

import conclaveclient.Conference.StreamClientAgent;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import conclave.interfaces.AdminInterface;
import conclave.interfaces.UserInterface;
import conclave.model.Announcement;
import conclave.model.ConnectionsLog;
import conclave.model.ConnectionEntry;
import conclave.model.Message;
import conclaveclient.Conference.ListeningClient;
import conclaveclient.Conference.StreamingServer;
import conclaveclient.Conference.display.BroadcastPanel;
import conclaveclient.Conference.display.VideoPanel;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JSeparator;
import javax.swing.KeyStroke;
import javax.swing.SwingConstants;

/**
 *
 * @author BradleyW
 */
public class SwingGUI extends javax.swing.JFrame {

    public UserInterface client;
    private boolean inRoom;
    private int lastMessageLine;
    private ArrayList<String> chatlogViewCategories = new ArrayList<String>();
    private boolean adminController;
    private BroadcastPanel broadcastPanel;

    public SwingGUI(UserInterface ui) {
        try {
            initComponents();
            client = ui;
            inRoom = false;
            adminController = false;
            welcomeLabel.setText("Welcome to Conclave, " + ui.getUsername());
            setConnectionsArea(client.viewAllConnections());
            buildFrontpage();
            setVisible(true);
            chatlogViewCategories.add("Room");
            chatlogViewCategories.add("System");
            chatlogViewCategories.add("Private");
            chatlogViewCategories.add("Admin");
            if (client.getType() == 1) {
                updateChatlog(new Message("Conclave", "Conclave", "You have logged in as a User", 2));
            } else if (client.getType() == 2) {
                updateChatlog(new Message("Conclave", "Conclave", "You have logged in as an Admin", 2));
                initilizeAdminTab();
            }
            initilizeTabs();
            startUpdates();
            pack();
            Runtime.getRuntime().addShutdownHook(new Thread() {
                @Override
                public void run() {
                    try {
                        System.out.println("DISCONNECTING");
                        client.leaveServer();
                    } catch (RemoteException ex) {
                        Logger.getLogger(SwingGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    private void initilizeTabs() {
        //tabbedPanel.add("Main", interactablePanel);
        //tabbedPanel.add("Configuration", configurationPanel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jLabel1 = new javax.swing.JLabel();
        passwordFormPanel = new javax.swing.JPanel();
        roomPasswordEntry = new javax.swing.JTextField();
        roomPasswordSubmit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        privateMsgPanel = new javax.swing.JPanel();
        pmField = new javax.swing.JTextField();
        pmSendButton = new java.awt.Button();
        pmLabel = new javax.swing.JLabel();
        filtersMsg = new javax.swing.ButtonGroup();
        AdminPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        roomSelection = new javax.swing.JComboBox<>();
        roomOpenButton = new javax.swing.JButton();
        roomCloseButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        roomName = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        roomTypeDropdown = new javax.swing.JComboBox<>();
        privateCheckbox = new javax.swing.JCheckBox();
        roomPassword = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        playerSelection = new javax.swing.JComboBox<>();
        banCheckbox = new javax.swing.JCheckBox();
        banKickButton = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        oneWayMessageField = new javax.swing.JTextField();
        sendMessage = new javax.swing.JButton();
        createRoomButton = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        pardonPlayerSelection = new javax.swing.JComboBox<>();
        pardonButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        announcmementField = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        postAnnouncementButton = new javax.swing.JButton();
        frontpage = new javax.swing.JPanel();
        announcments = new java.awt.List();
        streamerControlPanel = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        streamButton = new javax.swing.JButton();
        connectionsScrollPanel = new javax.swing.JScrollPane();
        connectionsPanel = new javax.swing.JPanel();
        textLog = new java.awt.TextArea();
        sendMessageButton = new javax.swing.JButton();
        welcomeLabel = new javax.swing.JLabel();
        refreshConnections = new javax.swing.JButton();
        disconnectButton = new javax.swing.JButton();
        leaveRoomButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        textInputArea = new javax.swing.JTextArea();
        exportChatLogButton = new javax.swing.JButton();
        chatlogFilterPanel = new javax.swing.JPanel();
        roomFilterCheckbox = new javax.swing.JCheckBox();
        systemFilterCheckbox = new javax.swing.JCheckBox();
        privateFilterCheckbox = new javax.swing.JCheckBox();
        adminFilterCheckbox = new javax.swing.JCheckBox();
        filterLabel = new javax.swing.JLabel();
        tabbedPanel = new javax.swing.JTabbedPane();
        interactablePanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();

        jMenuItem1.setText("jMenuItem1");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jLabel1.setText("jLabel1");

        roomPasswordEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomPasswordEntryActionPerformed(evt);
            }
        });

        roomPasswordSubmit.setText("Submit");
        roomPasswordSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomPasswordSubmitActionPerformed(evt);
            }
        });

        jLabel2.setText("Password:");

        jLabel3.setText("This is a private room.");

        javax.swing.GroupLayout passwordFormPanelLayout = new javax.swing.GroupLayout(passwordFormPanel);
        passwordFormPanel.setLayout(passwordFormPanelLayout);
        passwordFormPanelLayout.setHorizontalGroup(
            passwordFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, passwordFormPanelLayout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(passwordFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(passwordFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(passwordFormPanelLayout.createSequentialGroup()
                            .addGap(16, 16, 16)
                            .addComponent(roomPasswordSubmit)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, passwordFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(roomPasswordEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(25, 25, 25))
            .addComponent(jSeparator1)
        );
        passwordFormPanelLayout.setVerticalGroup(
            passwordFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, passwordFormPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roomPasswordEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roomPasswordSubmit)
                .addContainerGap())
        );

        pmSendButton.setLabel("Send");
        pmSendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmSendButtonActionPerformed(evt);
            }
        });

        pmLabel.setText("You are sending a private message to: ");

        javax.swing.GroupLayout privateMsgPanelLayout = new javax.swing.GroupLayout(privateMsgPanel);
        privateMsgPanel.setLayout(privateMsgPanelLayout);
        privateMsgPanelLayout.setHorizontalGroup(
            privateMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(privateMsgPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(privateMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(privateMsgPanelLayout.createSequentialGroup()
                        .addComponent(pmField, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pmSendButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pmLabel))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        privateMsgPanelLayout.setVerticalGroup(
            privateMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(privateMsgPanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(pmLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(privateMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pmField)
                    .addComponent(pmSendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel10.setText("Manage Room Visiblities");

        roomSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        roomSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomSelectionActionPerformed(evt);
            }
        });

        roomOpenButton.setText("Open");
        roomOpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomOpenButtonActionPerformed(evt);
            }
        });

        roomCloseButton.setText("Close");
        roomCloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomCloseButtonActionPerformed(evt);
            }
        });

        jLabel11.setText("Start a new Room");

        jLabel12.setText("Name:");

        jLabel13.setText("Type:");

        roomTypeDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        privateCheckbox.setText("Private");
        privateCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                privateCheckboxActionPerformed(evt);
            }
        });

        roomPassword.setEnabled(false);

        jLabel15.setText("Password:");

        jLabel14.setText("Manage Connection:");

        playerSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        playerSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerSelectionActionPerformed(evt);
            }
        });

        banCheckbox.setText("Ban");

        banKickButton.setText("Kick");
        banKickButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                banKickButtonActionPerformed(evt);
            }
        });

        jLabel17.setText("Send One-Way Message:");

        sendMessage.setText("Send");
        sendMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageActionPerformed(evt);
            }
        });

        createRoomButton.setText("Create");
        createRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRoomButtonActionPerformed(evt);
            }
        });

        jLabel18.setText("Revoke Ban:");

        pardonPlayerSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        pardonButton.setText("Pardon");
        pardonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pardonButtonActionPerformed(evt);
            }
        });

        jLabel19.setText("Server Announcements:");

        jLabel20.setText("Field:");

        postAnnouncementButton.setText("Post");
        postAnnouncementButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postAnnouncementButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AdminPanelLayout = new javax.swing.GroupLayout(AdminPanel);
        AdminPanel.setLayout(AdminPanelLayout);
        AdminPanelLayout.setHorizontalGroup(
            AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(AdminPanelLayout.createSequentialGroup()
                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(AdminPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AdminPanelLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(roomSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(roomOpenButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(roomCloseButton))
                            .addGroup(AdminPanelLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(roomTypeDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(privateCheckbox)
                                .addGap(5, 5, 5)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(roomPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(createRoomButton, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                            .addGroup(AdminPanelLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(48, 48, 48)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(roomName))
                            .addGroup(AdminPanelLayout.createSequentialGroup()
                                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(AdminPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(oneWayMessageField, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(AdminPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addGap(31, 31, 31)
                                        .addComponent(playerSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(banCheckbox)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(banKickButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(sendMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(AdminPanelLayout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(announcmementField, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(postAnnouncementButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(AdminPanelLayout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addGap(128, 431, Short.MAX_VALUE))
                            .addGroup(AdminPanelLayout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pardonPlayerSelection, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pardonButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        AdminPanelLayout.setVerticalGroup(
            AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdminPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(roomSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomOpenButton)
                    .addComponent(roomCloseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(roomName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12))
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(createRoomButton)
                    .addComponent(jLabel13)
                    .addComponent(roomTypeDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(privateCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(playerSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(banCheckbox)
                    .addComponent(banKickButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(oneWayMessageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendMessage))
                .addGap(30, 30, 30)
                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(pardonPlayerSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pardonButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(announcmementField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(postAnnouncementButton))
                .addGap(66, 66, 66))
        );

        javax.swing.GroupLayout frontpageLayout = new javax.swing.GroupLayout(frontpage);
        frontpage.setLayout(frontpageLayout);
        frontpageLayout.setHorizontalGroup(
            frontpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(announcments, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
        );
        frontpageLayout.setVerticalGroup(
            frontpageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(announcments, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
        );

        jButton2.setText("Stop Streaming");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout streamerControlPanelLayout = new javax.swing.GroupLayout(streamerControlPanel);
        streamerControlPanel.setLayout(streamerControlPanelLayout);
        streamerControlPanelLayout.setHorizontalGroup(
            streamerControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(streamerControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                .addContainerGap())
        );
        streamerControlPanelLayout.setVerticalGroup(
            streamerControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, streamerControlPanelLayout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(20, 20, 20))
        );

        streamButton.setText("Stream");
        streamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                streamButtonActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        connectionsScrollPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        connectionsScrollPanel.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                connectionsScrollPanelComponentAdded(evt);
            }
        });

        javax.swing.GroupLayout connectionsPanelLayout = new javax.swing.GroupLayout(connectionsPanel);
        connectionsPanel.setLayout(connectionsPanelLayout);
        connectionsPanelLayout.setHorizontalGroup(
            connectionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 610, Short.MAX_VALUE)
        );
        connectionsPanelLayout.setVerticalGroup(
            connectionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 291, Short.MAX_VALUE)
        );

        connectionsScrollPanel.setViewportView(connectionsPanel);

        textLog.setEditable(false);

        sendMessageButton.setText("-->");
        sendMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageButtonActionPerformed(evt);
            }
        });
        sendMessageButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sendMessageButtonKeyPressed(evt);
            }
        });

        welcomeLabel.setText("Welcome to Conclave");

        refreshConnections.setText("Refresh Connections");
        refreshConnections.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshConnectionsActionPerformed(evt);
            }
        });

        disconnectButton.setText("Disconnect");
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        leaveRoomButton.setText("Leave Room");
        leaveRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaveRoomButtonActionPerformed(evt);
            }
        });

        textInputArea.setColumns(20);
        textInputArea.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        textInputArea.setRows(5);
        jScrollPane3.setViewportView(textInputArea);

        exportChatLogButton.setText("Export ChatLog");
        exportChatLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportChatLogButtonActionPerformed(evt);
            }
        });

        roomFilterCheckbox.setSelected(true);
        roomFilterCheckbox.setText("View Room Messages");
        roomFilterCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomFilterCheckboxActionPerformed(evt);
            }
        });

        systemFilterCheckbox.setSelected(true);
        systemFilterCheckbox.setText("View System Messages");
        systemFilterCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                systemFilterCheckboxActionPerformed(evt);
            }
        });

        privateFilterCheckbox.setSelected(true);
        privateFilterCheckbox.setText("View Private Messages");
        privateFilterCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                privateFilterCheckboxActionPerformed(evt);
            }
        });

        adminFilterCheckbox.setSelected(true);
        adminFilterCheckbox.setText("View Admin Messages");
        adminFilterCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminFilterCheckboxActionPerformed(evt);
            }
        });

        filterLabel.setText("Filter Chatlog messages:");

        javax.swing.GroupLayout chatlogFilterPanelLayout = new javax.swing.GroupLayout(chatlogFilterPanel);
        chatlogFilterPanel.setLayout(chatlogFilterPanelLayout);
        chatlogFilterPanelLayout.setHorizontalGroup(
            chatlogFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chatlogFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(chatlogFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(roomFilterCheckbox)
                    .addComponent(systemFilterCheckbox)
                    .addComponent(privateFilterCheckbox)
                    .addComponent(adminFilterCheckbox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, chatlogFilterPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filterLabel)
                .addGap(29, 29, 29))
        );
        chatlogFilterPanelLayout.setVerticalGroup(
            chatlogFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, chatlogFilterPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filterLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(roomFilterCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(systemFilterCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(privateFilterCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(adminFilterCheckbox))
        );

        interactablePanel.setMaximumSize(new java.awt.Dimension(1000, 800));
        tabbedPanel.addTab("Main", interactablePanel);

        jTextField1.setText("jTextField1");

        jLabel4.setText("Account Configuration");

        jLabel5.setText("Display Name:");

        jPasswordField1.setText("jPasswordField1");

        jLabel6.setText("Password:");

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Chatlog Preferences");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel8.setText("Font:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel9.setText("Font Size:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addContainerGap(175, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Configuration", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(refreshConnections, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(disconnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(leaveRoomButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exportChatLogButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chatlogFilterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(connectionsScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(welcomeLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendMessageButton))
                    .addComponent(textLog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(tabbedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 745, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(welcomeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectionsScrollPanel))
                    .addComponent(tabbedPanel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(refreshConnections, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(disconnectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(leaveRoomButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportChatLogButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chatlogFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textLog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(sendMessageButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE))))
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        try {
            if (inRoom) {
                if (client.getRoomType() == 2 && broadcastPanel != null) {
                    broadcastPanel.stop();
                }
                client.leaveRoom();
            }
            client.disconnect();
            inRoom = false;
        } catch (RemoteException e) {
            e.printStackTrace();
        }
        System.exit(-1);
    }//GEN-LAST:event_disconnectButtonActionPerformed

    private void leaveRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaveRoomButtonActionPerformed
        try {
            if (inRoom) {
                if (client.getRoomType() == 2 && broadcastPanel != null) {
                    broadcastPanel.stop();
                }
                client.leaveRoom();
                inRoom = false;
                buildFrontpage();
            }
        } catch (RemoteException e) {

        }
    }//GEN-LAST:event_leaveRoomButtonActionPerformed

    private void exportChatLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportChatLogButtonActionPerformed
        try {
            System.out.println(client.exportChatLog());
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_exportChatLogButtonActionPerformed

    private void sendMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageButtonActionPerformed
        // TODO add your handling code here:
        try {
            if (inRoom) {
                client.postMessage(textInputArea.getText());
                textInputArea.setText("");
            }
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_sendMessageButtonActionPerformed

    private void refreshConnectionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshConnectionsActionPerformed
        try {
            ConnectionsLog connectionsLog = client.viewAllConnections();
            setConnectionsArea(connectionsLog);
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_refreshConnectionsActionPerformed

    private void connectionsScrollPanelComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_connectionsScrollPanelComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_connectionsScrollPanelComponentAdded

    private void roomPasswordSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomPasswordSubmitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomPasswordSubmitActionPerformed

    private void roomPasswordEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomPasswordEntryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomPasswordEntryActionPerformed

    private void pmSendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmSendButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pmSendButtonActionPerformed

    private void roomFilterCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomFilterCheckboxActionPerformed
        if (roomFilterCheckbox.isSelected()) {
            chatlogViewCategories.add("Room");
        } else {
            chatlogViewCategories.remove("Room");
        }
        resetChatlogView();
    }//GEN-LAST:event_roomFilterCheckboxActionPerformed

    private void systemFilterCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_systemFilterCheckboxActionPerformed
        if (systemFilterCheckbox.isSelected()) {
            chatlogViewCategories.add("System");
        } else {
            chatlogViewCategories.remove("System");
        }
        resetChatlogView();
    }//GEN-LAST:event_systemFilterCheckboxActionPerformed

    private void privateFilterCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_privateFilterCheckboxActionPerformed
        if (privateFilterCheckbox.isSelected()) {
            chatlogViewCategories.add("Private");
        } else {
            chatlogViewCategories.remove("Private");
        }
        resetChatlogView();
    }//GEN-LAST:event_privateFilterCheckboxActionPerformed

    private void adminFilterCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminFilterCheckboxActionPerformed
        if (adminFilterCheckbox.isSelected()) {
            chatlogViewCategories.add("Admin");
        } else {
            chatlogViewCategories.remove("Admin");
        }
        resetChatlogView();
    }//GEN-LAST:event_adminFilterCheckboxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void privateCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_privateCheckboxActionPerformed
        if (roomPassword.isEnabled()) {
            roomPassword.setEnabled(false);
        } else {
            roomPassword.setEnabled(true);
        }
    }//GEN-LAST:event_privateCheckboxActionPerformed

    private void banKickButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_banKickButtonActionPerformed
        if (adminController) {
            try {
                Message kickStatus = new Message("System", client.getUsername(), "Cannot kick/ban that user", 2);
                String connectionSelectUsername = (String) playerSelection.getSelectedItem();
                AdminInterface controller = (AdminInterface) client;
                boolean banned = banCheckbox.isSelected();
                controller.kickUser(connectionSelectUsername, banned);
                kickStatus.setMsgText("That user has been kicked/banned");
                updateChatlog(kickStatus);
            } catch (RemoteException e) {
            }
        }
    }//GEN-LAST:event_banKickButtonActionPerformed

    private void playerSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerSelectionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_playerSelectionActionPerformed

    private void pardonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pardonButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pardonButtonActionPerformed

    private void roomOpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomOpenButtonActionPerformed
        if (adminController) {
            try {
                String roomselect = (String) roomSelection.getSelectedItem();
                AdminInterface controller = (AdminInterface) client;
                controller.openRoom(roomselect);
                Message openRoomMsg = new Message("System", client.getUsername(), roomselect + " is now opened", 2);
                updateChatlog(openRoomMsg);
                initilizeAdminContents();
            } catch (RemoteException e) {

            }
        }
    }//GEN-LAST:event_roomOpenButtonActionPerformed

    private void roomSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomSelectionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomSelectionActionPerformed

    private void roomCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomCloseButtonActionPerformed
        if (adminController) {
            try {
                String roomselect = (String) roomSelection.getSelectedItem();
                AdminInterface controller = (AdminInterface) client;
                controller.closeRoom(roomselect);
                Message closeRoomMsg = new Message("System", client.getUsername(), roomselect + " is now closed", 2);
                updateChatlog(closeRoomMsg);
                initilizeAdminContents();
            } catch (RemoteException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_roomCloseButtonActionPerformed

    private void createRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRoomButtonActionPerformed
        if (adminController) {
            try {
                Message createRoomStatus = new Message("System", client.getUsername(), "Room creation has failed", 2);
                AdminInterface controller = (AdminInterface) client;
                String newRoomName = roomName.getText();
                String newRoomTypeName = (String) roomTypeDropdown.getSelectedItem();
                int roomType = 0;
                switch (newRoomTypeName) {
                    case "TextRoom":
                        roomType = 1;
                        break;
                    case "ConferenceRoom":
                        roomType = 2;
                        break;
                }
                if (privateCheckbox.isSelected()) {
                    String roomPasswordptext = roomPassword.getText();
                    if (roomPasswordptext != null) {
                        controller.addRoom(newRoomName, roomType, roomPasswordptext);
                        createRoomStatus.setMsgText("Private room successfully created");
                    } else {
                        createRoomStatus.setMsgText("You must enter a password to create a private room");
                    }
                } else {
                    controller.addRoom(newRoomName, roomType);
                    createRoomStatus.setMsgText("Open room successfully created");
                }
                updateChatlog(createRoomStatus);
                initilizeAdminContents();
            } catch (RemoteException e) {

            }
        }
    }//GEN-LAST:event_createRoomButtonActionPerformed

    private void sendMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageActionPerformed
        String msg = oneWayMessageField.getText();
        String username = (String) playerSelection.getSelectedItem();
        Message sendMessage = new Message(username, username, msg, 4);
        if (msg != null) {
            try {
                AdminInterface controller = (AdminInterface) client;
                controller.sendAdminMessage(sendMessage, username);
                updateChatlog(sendMessage);
            } catch (RemoteException ex) {
                Logger.getLogger(SwingGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_sendMessageActionPerformed

    private void postAnnouncementButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postAnnouncementButtonActionPerformed
        if (adminController) {
            try {
                String msg = announcmementField.getText();
                if (msg != null) {
                    AdminInterface controller = (AdminInterface) client;
                    controller.postAnnouncment(msg);
                }
            } catch (RemoteException e) {

            }
        }
    }//GEN-LAST:event_postAnnouncementButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

    }//GEN-LAST:event_jButton2ActionPerformed

    private void sendMessageButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sendMessageButtonKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_sendMessageButtonKeyPressed

    private void streamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_streamButtonActionPerformed
        broadcastPanel.startStreaming();
        try {
            client.broadcastToConference(broadcastPanel.getIP(), broadcastPanel.getDimension());
        } catch (RemoteException ex) {
            Logger.getLogger(SwingGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        pack();
    }//GEN-LAST:event_streamButtonActionPerformed

    private void resetChatlogView() {
        textLog.setText("");
        lastMessageLine = 0;
    }
// Jess has a peach

    private void buildFrontpage() {
        interactablePanel.removeAll();
        interactablePanel.add(frontpage);
        updateFrontpage();
    }

    private void updateFrontpage() {
        try {
            announcments.removeAll();
            for (Announcement update : client.getFrontpage()) {
                String line = update.getName() + ": " + update.getText();
                announcments.add(line);
            }
        } catch (RemoteException ex) {
            Logger.getLogger(SwingGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void interactConnection(java.awt.event.ActionEvent evt, String entryName) {
        try {
            if (!inRoom) {
                if (client.hasPassword(entryName)) {
                    final JFrame newFrame = new JFrame();
                    final String roomPasswordName = entryName;
                    //newFrame.setPreferredSize(new Dimension(300, 400));
                    //passwordFormPanel.setPreferredSize(new Dimension(300, 400));
                    roomPasswordSubmit.addActionListener(new java.awt.event.ActionListener() {
                        @Override
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            validatePassword(roomPasswordName, roomPasswordEntry.getText());
                            roomPasswordEntry.setText("");
                            newFrame.setVisible(false);
                        }
                    });
                    newFrame.add(passwordFormPanel);
                    newFrame.pack();
                    newFrame.setVisible(true);
                } else {
                    joinRoom(entryName);
                }
            } else if (inRoom) {
                final JFrame newFrame = new JFrame();
                final String recipietUsername = entryName;
                final String senderUsername = client.getUsername();
                //newFrame.setPreferredSize(new Dimension(300, 400));
                //passwordFormPanel.setPreferredSize(new Dimension(300, 400));
                pmSendButton.addActionListener(new java.awt.event.ActionListener() {
                    @Override
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        try {
                            client.sendPrivateMessage(pmField.getText(), recipietUsername);
                            pmField.setText("");
                            newFrame.setVisible(false);
                        } catch (RemoteException e) {
                            Message newMessage = new Message("System", senderUsername, "That user could not be reached", 2);
                            try {
                                client.updateChatLog(newMessage);
                            } catch (RemoteException ex) {
                                Logger.getLogger(SwingGUI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                });
                newFrame.add(privateMsgPanel);
                newFrame.pack();
                newFrame.setVisible(true);
            }
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    private void validatePassword(String entryName, String passwordEntry) {
        try {
            boolean validated = client.joinRoom(entryName, passwordEntry);
            if (validated) {
                joinRoom(entryName);
            } else {
                String incorrectMsg = "Incorrect password";
                Message msg = new Message("System", client.getUsername(), incorrectMsg, 2);
                client.updateChatLog(msg);
            }
        } catch (RemoteException e) {

        }
    }

    private void joinRoom(String entryName) {
        try {
            boolean joined = client.joinRoom(entryName);
            if (!joined) {
            interactablePanel.removeAll();
            inRoom = true;
            if (client.getRoomType() == 2) {
                buildBroadcastPanel();
            }
            } else {
                updateChatlog(new Message("System", client.getUsername(), "You cannot connect to that room", 2));
            }
        } catch (RemoteException e) {

        }
    }

    private void setConnectionsArea(ConnectionsLog connections) {
        connectionsPanel.removeAll();
        connectionsPanel.setLayout(new BoxLayout(connectionsPanel, BoxLayout.PAGE_AXIS));
        connectionsPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));
        connectionsPanel.add(Box.createHorizontalGlue());
        connectionsPanel.add(Box.createRigidArea(new Dimension(10, 0)));
        int i = 0;
        for (ConnectionEntry entry : connections.getAllConnections()) {
            final String entryName = entry.getName();
            String label = i + ":" + entryName;
            JLabel connectionDesc = new JLabel(entry.getDesc());
            JButton newInteractionButton = new JButton(label);
            newInteractionButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    interactConnection(evt, entryName);
                }
            });
            connectionsPanel.add(newInteractionButton);
            connectionsPanel.add(connectionDesc);
            connectionsPanel.add(new JSeparator(SwingConstants.HORIZONTAL));
            i++;
        }
        pack();
    }

    private void startUpdates() {
        Thread updates;
        updates = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    while (client.isConnected()) {
                        if (client.hasConnectionsUpdated()) {
                            setConnectionsArea(client.viewAllConnections());
                        }
                        if (client.hasFrontpageUpdated()) {
                            updateFrontpage();
                        }
                        int lstMsgClient = client.getLastMessageLine();
                        if (lstMsgClient > lastMessageLine) {
                            LinkedList<Message> newMessages = client.getChatlogUpdates(lastMessageLine);
                            for (Message newMessage : newMessages) {
                                if (newMessage != null) {
                                    System.out.println(newMessage.msgDisplay());
                                    updateChatlog(newMessage);
                                }
                            }
                            lastMessageLine = lstMsgClient;
                        }
                        Thread.sleep(500);
                    }
                } catch (RemoteException | InterruptedException e) {
                }
            }
        });
        updates.start();
    }

    private void updateChatlog(Message msg) {
        if (msg != null && chatlogViewCategories.contains(msg.getType())) {
            textLog.append(msg.msgDisplay());
            textLog.append("\n");
            pack();
        }
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AdminPanel;
    private javax.swing.JCheckBox adminFilterCheckbox;
    private javax.swing.JTextField announcmementField;
    private java.awt.List announcments;
    private javax.swing.JCheckBox banCheckbox;
    private javax.swing.JButton banKickButton;
    private javax.swing.JPanel chatlogFilterPanel;
    private javax.swing.JPanel connectionsPanel;
    private javax.swing.JScrollPane connectionsScrollPanel;
    private javax.swing.JButton createRoomButton;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JButton exportChatLogButton;
    private javax.swing.JLabel filterLabel;
    private javax.swing.ButtonGroup filtersMsg;
    private javax.swing.JPanel frontpage;
    private javax.swing.JPanel interactablePanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton leaveRoomButton;
    private javax.swing.JTextField oneWayMessageField;
    private javax.swing.JButton pardonButton;
    private javax.swing.JComboBox<String> pardonPlayerSelection;
    private javax.swing.JPanel passwordFormPanel;
    private javax.swing.JComboBox<String> playerSelection;
    private javax.swing.JTextField pmField;
    private javax.swing.JLabel pmLabel;
    private java.awt.Button pmSendButton;
    private javax.swing.JButton postAnnouncementButton;
    private javax.swing.JCheckBox privateCheckbox;
    private javax.swing.JCheckBox privateFilterCheckbox;
    private javax.swing.JPanel privateMsgPanel;
    private javax.swing.JButton refreshConnections;
    private javax.swing.JButton roomCloseButton;
    private javax.swing.JCheckBox roomFilterCheckbox;
    private javax.swing.JTextField roomName;
    private javax.swing.JButton roomOpenButton;
    private javax.swing.JTextField roomPassword;
    private javax.swing.JTextField roomPasswordEntry;
    private javax.swing.JButton roomPasswordSubmit;
    private javax.swing.JComboBox<String> roomSelection;
    private javax.swing.JComboBox<String> roomTypeDropdown;
    private javax.swing.JButton sendMessage;
    private javax.swing.JButton sendMessageButton;
    private javax.swing.JButton streamButton;
    private javax.swing.JPanel streamerControlPanel;
    private javax.swing.JCheckBox systemFilterCheckbox;
    private javax.swing.JTabbedPane tabbedPanel;
    private javax.swing.JTextArea textInputArea;
    private java.awt.TextArea textLog;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables

    private void initilizeAdminTab() {
        tabbedPanel.add("Admin", AdminPanel);
        initilizeAdminContents();
    }

    private void initilizeAdminContents() {
        roomSelection.removeAllItems();
        roomTypeDropdown.removeAllItems();
        playerSelection.removeAllItems();
        adminController = true;
        try {
            AdminInterface controller = (AdminInterface) client;
            List<String> roomNames = controller.getRoomNames();
            for (String name : roomNames) {
                roomSelection.addItem(name);
            }
            List<String> supportedRoomTypes = controller.getSupportedRoomTypes();
            for (String roomType : supportedRoomTypes) {
                roomTypeDropdown.addItem(roomType);
            }
            List<String> activeUserNames = controller.getAllConnectedUsernames();
            for (String username : activeUserNames) {
                playerSelection.addItem(username);
            }
        } catch (RemoteException e) {

        }

        pack();
    }

    private void buildBroadcastPanel() {
        broadcastPanel = new BroadcastPanel(client);
        interactablePanel.removeAll();
        interactablePanel.add(broadcastPanel);
        pack();
    }
}
